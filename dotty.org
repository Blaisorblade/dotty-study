#+STARTUP: indent

* Scala Papers
** general
- Scala Language Specification
- Unifying functional and object-oriented programming with Scala(2014)
- Scalable component abstractions(2005)

** type system
- A core calculus for Scala type checking(2006)
- Towards equal rights for higher-kinded types(2007)
- Generics of a higher kind(2008)
- The Essense of Dependent Object Types(2016)

** type classes
- Poor manâ€™s type classes(2006)
- Type classes as objects and implicits(2010)
- Type classes are signatures of abstract types(2013)

** Compiler
- Local type inference(2000)
- Colored local type inference(2001)
- A typed intermediate language and algorithms for compiling Scala by successive rewritings(2006) PhD thesis
- Late data layout: unifying data representation transformations(2014)
- Implementing a type debugger for Scala(2012)
- When compilers are mirrors(2012)
- Compiling structural types on the JVM: a comparison of reflective and generative techniques from Scala's perspective(2009)
- Call Graphs for Languages with Parametric Polymorphism(2016)

** structural types
- Whiteoak: introducing structural typing into java(2008)
- Compiling structural types on the JVM: a comparison of reflective and generative techniques from Scala's perspective(2009)

** language design
- Fighting bit rot with types (experience report: Scala collections)(2009)
- The Scala experiment: can we provide better language support for component systems?(2008)
- Future-proofing collections: from mutable to persistent to parallel(2011)

** virtualization
- Scala-Virtualized: linguistic reuse for deep embeddings(2012)
- Lightweight modular staging: a pragmatic approach to runtime code
  generation and compiled DSLs(2010)
- Language virtualization for heterogeneous parallel computing(2010)
- Lightweight modular staging and embedded compilers(2012) PhD thesis

** macros and metaprogramming
- Scala macros(2012)
- Quasiquotes for scala(2013)
- Yin-Yang: Concealing the deep embedding of DSLs(2014)
- Reflecting scala(2008)
- Translation correctness for first-order object-oriented pattern matching(2007)
- Scala Macros, a Technical Report(2012)

** pattern matching
- Matching Objects with Patterns(2007)
- Object-oriented pattern matching(2007) PhD thesis

** DSL
- Parser combinators in Scala(2008)
- Staged parser combinators for efficient data processing(2014)
- Big Data Analytics with Delite(2013)
- Forge: generating a high performance DSL implementation from a
  declarative specification(2014)
- Spiral in scala: towards the systematic construction of generators
  for performance libraries(2013)

** parallel and distributed computing
- A generic parallel collection framework
- Scala actors: Unifying thread-based and event-based programming(2009)
- On Lock-Free Work-stealing Iterators for Parallel Data Structures(2014)
- Spores: A type-based foundation for closures in the age of concurrency and distribution(2014)
- Isolates, channels, and event streams for composable distributed programming(2015)

** effects
- A flow-insensitive, modular effect system for purity(2013)
- Lightweight polymorphic effects(2012)
- Relative Effect Declarations for Lightweight Effect-Polymorphism(2012)

* Development
** Run tests locally: `sbt test`
** Run a specific subset of test
test-only -- --tests=dotc_util,pos_all
** How to add a test case?
*** `tests/pos` - test cases for parsing
*** `tests/pos-scala2` - test cases for parsing in Scala2 mode
*** `tests/neg` - test cases that should not compile
*** `tests/run` - test cases that can run with expected  output in `.check` file
*** test beginning with `i` are issues # on `lampepfl/dotty`, e.g. `i1059.scala`
*** test beginning with `t` are issues # on `scala/scala`, e.g. `t1059.scala`
** How to create AST trees in code
- Use helper functions in `untpd._` and `tpd._`.
- Use helper methods in `TreeOps` (preferred)
* Usage
** Compile a file
=./bin/dotc tests/pos/HelloWorld.scala=
** Print the raw AST
Use the plain-printer
=dotc2 -Xprint:all -Yprintpos -Yplain-printer hello.scala=
** Show AST after parsing
=./bin/dotc -Xprint:parser -Yplain-printer  examples/hello.scala=
** Show AST after a phase
=./bin/dotc -Xprint:frontend  -Yplain-printer examples/hello.scala=
=./bin/dotc -Xprint:posttyper,refchecks -Yplain-printer examples/hello.scala=
** Stop after a phase
=./bin/dotc -Ystop-after:refchecks  examples/hello.scala=
** Print types of each expression
=./bin/dotc -Xprint:refchecks -Xprint-types examples/hello.scala=
** Print bounds of type variables
=./bin/dotc -Xprint:refchecks -Yshow-var-bounds examples/hello.scala=
** Skip a phase
=./bin/dotc -Xprint:refchecks -Yskip:posttyper examples/hello.scala=
** Output information about classpath
=./bin/dotc -Ylog-classpath examples/hello.scala=
** Check tree at the end of a phase
=./bin/dotc -Ycheck:flatten examples/hello.scala=
** Show tree positions
=./bin/dotc -Xprint:posttyper -Yprintpos examples/hello.scala=
** Check that compiled program does not contain global vars
=./bin/dotc -Ycheck-reentrant examples/hello.scala=
** Explain errors in low-level types
=./bin/dotc -Yexplain-lowlevel examples/hello.scala=
** Explain type errors in more detail
=./bin/dotc -explaintypes examples/hello.scala=
** Prompt at exception
=./bin/dotc -Xprompt abc.scala=
** Debug typer
First change `dotty.tools.dotc.config.Printers.typr` to `default`. Then run the command:
=./bin/dotc -Ylog:frontend test.scala=
** Use scalajs as backend
=./bin/dotc -scalajs examples/hello.scala=
* Concepts: Trees, Symbols and Types

http://docs.scala-lang.org/overviews/reflection/symbols-trees-types

The source program is represented by the AST tree. Each tree node has
a type, which is assigned by the typer.

What makes programming interesting is names. Naming is the primary
means of abstraction in programming. Names, just like human names, are
strings that refer to some entities, such as methods, variables,
classes, packages.

Like human names, names can be ambiguous due to duplicate names. Names
can only get exact meaning in a context. The exact meaning of a name
in a context is a symbol. Fixing the meaning of names is the task of
the typer.

A symbol carries abstract information about the named entity, such as
type, owner, members for class symbols, accessiblity information etc.

A symbol NEVER refers to AST definitions of the underlying
entity. Libraries are loaded as symbol trees.

The context has a `owner: symbol` field, indicating the owner of the
current AST tree. That's the only indirect link from AST trees to
symbols.

In dotty, the root of the symbol tree is `RootClass` and
`RootPackage`. Each package or class symbol has access to its child
symbols.

The symbol tree exists in parallel to the AST tree. The usage of names
in the AST tree creates references to the symbol tree. It's the task
of the typer to create the symbol tree from AST tree or from
libraries, and establish the correct links from the AST tree to the
symbol tree. The typer also sets up types for each node of the symbol
tree and AST tree. Types are the unidirectional bridge from AST trees
to symbols.

Unlike the AST tree, which is a complete top-down structure, the
symbol tree is a down-top structure (via `owner: symbol` field). The
upper-level symbols only have indirect access to lower level symbols
through types if current symbol represents a class or package.

A class symbol has access to all its member symbols, which are stored
as part of the type information of a class(ClassInfo). A class symbol
also has access to its parent class.

In dotty, `Ident` is the AST tree node that invovles names. `Ident`
refers to symbols in the symbol tree. `Ident` takes `NamedType` as
type, which could be `TypeRef` or `TermRef`. `TypeRef` refers to a
prefix#type, `TermRef` refers to prefix#id. Both holds a reference to
the destination symbol.

Scala supports type members. In the AST, type member definition is
represented by `TypeDef`, its type is `TypeAlias`. Type member usage
in AST is represented by `TypeTree[TypeRef(_)]`. The type of the
`TypeTree` is of `TypeRef`, which refers to the symbol of the type
member, whose type is `TypeAlias`.

In dotty, symbol is further split into the pair (symbol, denotation)
to enable one symbol to have different meanings in different
compilation phases. Each symbol has immediate access to its
denotation. Denotations represent the meaning of symbols for a given
phase. Denotation holds information such as name, type, owner symbol,
etc.

Due to the existence of overloaded functions, denotations are still
ambiguous. In dotty, denotations fall into two categories:
MultiDenotation and SingleDenotation. Signatures are used to uniquely
differentiate the meaning of names in a specific context.

* Types
#+BEGIN_SRC
Type -+- ProxyType --+- NamedType ----+--- TypeRef
      |              |                 \
      |              +- SingletonType-+-+- TermRef
      |              |                |
      |              |                +--- ThisType
      |              |                +--- SuperType
      |              |                +--- ConstantType
      |              |                +--- MethodParam
      |              |                +----RefinedThis
      |              |                +--- SkolemType
      |              +- PolyParam
      |              +- RefinedType
      |              +- TypeBounds
      |              +- ExprType
      |              +- AnnotatedType
      |              +- TypeVar
      |
      +- GroundType -+- AndType
                     +- OrType
                     +- MethodType -----+- ImplicitMethodType
                     |                  +- JavaMethodType
                     +- PolyType
                     +- ClassInfo
                     |
                     +- NoType
                     +- NoPrefix
                     +- ErrorType
                     +- WildcardType
#+END_SRC
