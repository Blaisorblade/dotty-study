digraph Tree {
  rankdir = "LR"
  ranksep = "1.5"
  node [fontname = "Helvetica", shape = "box"]

  RefTree -> { NameTree }
  ValOrDefDef -> { MemberDef }
  Bind -> { NameTree DefTree PatternTree }
  DenotingTree -> { Tree }
  Import -> { DenotingTree }
  ProxyTree -> { Tree }
  EmptyValDef -> { ValDef WithoutTypeOrPos }
  DefDef -> { ValOrDefDef }
  TypeTree -> { DenotingTree TypTree }
  If -> { TermTree }
  BackquotedIdent -> { Ident }
  This -> { DenotingTree TermTree }
  DefTree -> { DenotingTree }
  GenericApply -> { ProxyTree TermTree }
  NameTree -> { DenotingTree }
  UnApply -> { PatternTree }
  Ident -> { RefTree }
  Try -> { TermTree }
  Typed -> { ProxyTree TermTree }
  Apply -> { GenericApply }
  NamedArg -> { Tree }
  TypeDef -> { MemberDef }
  ValDef -> { ValOrDefDef }
  Super -> { ProxyTree TermTree }
  MemberDef -> { NameTree DefTree }
  AppliedTypeTree -> { ProxyTree TypTree }
  Thicket -> { WithoutTypeOrPos }
  TypeApply -> { GenericApply }
  SeqLiteral -> { Tree }
  TermTree -> { Tree }
  Return -> { TermTree }
  TypTree -> { Tree }
  Template -> { DefTree }
  JavaSeqLiteral -> { SeqLiteral }
  RefinedTypeTree -> { ProxyTree TypTree }
  Literal -> { TermTree }
  Match -> { TermTree }
  WithoutTypeOrPos -> { Tree }
  Alternative -> { PatternTree }
  Closure -> { TermTree }
  Annotated -> { ProxyTree }
  SingletonTypeTree -> { DenotingTree TypTree }
  New -> { TermTree }
  Block -> { TermTree }
  AndTypeTree -> { TypTree }
  CaseDef -> { Tree }
  TypeBoundsTree -> { TypTree }
  PackageDef -> { ProxyTree }
  Select -> { RefTree }
  PatternTree -> { Tree }
  Assign -> { TermTree }
  OrTypeTree -> { TypTree }
  Pair -> { TermTree }
  SelectWithSig -> { Select }
  SelectFromTypeTree -> { RefTree }
  ByNameTypeTree -> { TypTree }
}